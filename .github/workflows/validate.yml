name: Validate HTML

on:
  push:
    paths:
      - '**.html'

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install HTML validator
        run: |
          echo "Installation de html-validate..."
          npm install -g html-validate || {
            echo "√âchec de l'installation de html-validate, installation d'une alternative..."
            npm install -g htmlhint
          }

      - name: Run HTML validation
        run: |
          echo "# Feedback Automatis√©" > feedback.md
          echo "" >> feedback.md
          echo "## R√©sultats de la validation HTML :" >> feedback.md
          echo "" >> feedback.md
          
          # Chercher tous les fichiers HTML
          html_files=$(find . -name "*.html" -not -path "./.git/*")
          if [ -z "$html_files" ]; then
            echo "‚ùå Aucun fichier HTML trouv√© dans le repository." >> feedback.md
          else
            echo "üìÅ **Fichiers HTML analys√©s** :" >> feedback.md
            for file in $html_files; do
              echo "- $file" >> feedback.md
            done
            echo "" >> feedback.md
            
            # Debug: v√©rifier que html-validate est install√©
            echo "Debug: V√©rification de html-validate..."
            if command -v html-validate >/dev/null 2>&1; then
              echo "Debug: html-validate trouv√©, utilisation..."
              # Analyser chaque fichier individuellement pour √©viter les probl√®mes
              validation_errors=false
              for file in $html_files; do
                echo "Debug: Analyse de $file avec html-validate..."
                if html-validate "$file" > "validation_${file##*/}.tmp" 2>&1; then
                  if [ -s "validation_${file##*/}.tmp" ]; then
                    echo "‚ö†Ô∏è **Erreurs dans $file** :" >> feedback.md
                    echo '```' >> feedback.md
                    cat "validation_${file##*/}.tmp" >> feedback.md
                    echo '```' >> feedback.md
                    validation_errors=true
                  fi
                else
                  echo "‚ö†Ô∏è **Erreurs dans $file** :" >> feedback.md
                  echo '```' >> feedback.md
                  cat "validation_${file##*/}.tmp" >> feedback.md
                  echo '```' >> feedback.md
                  validation_errors=true
                fi
                rm -f "validation_${file##*/}.tmp"
              done
            elif command -v htmlhint >/dev/null 2>&1; then
              echo "Debug: html-validate non trouv√©, utilisation de htmlhint..."
              validation_errors=false
              for file in $html_files; do
                echo "Debug: Analyse de $file avec htmlhint..."
                if ! htmlhint "$file" > "validation_${file##*/}.tmp" 2>&1; then
                  echo "‚ö†Ô∏è **Erreurs dans $file** :" >> feedback.md
                  echo '```' >> feedback.md
                  cat "validation_${file##*/}.tmp" >> feedback.md
                  echo '```' >> feedback.md
                  validation_errors=true
                fi
                rm -f "validation_${file##*/}.tmp"
              done
            else
              echo "‚ö†Ô∏è **Validation basique** : Aucun validateur HTML install√©" >> feedback.md
              validation_errors=false
            fi
            
            if [ "$validation_errors" = false ]; then
              echo "‚úÖ **Aucune erreur de validation HTML d√©tect√©e !**" >> feedback.md
              echo "Votre code HTML semble correct." >> feedback.md
            fi
          fi
          echo "" >> feedback.md

      - name: Analyze HTML code quality
        run: |
          echo "## Analyse de la qualit√© du code :" >> feedback.md
          echo "" >> feedback.md
          
          html_files=$(find . -name "*.html" -not -path "./.git/*")
          
          for file in $html_files; do
            echo "### üìÑ Analyse de \`$file\` :" >> feedback.md
            echo "" >> feedback.md
            
            # Points forts
            echo "#### ‚úÖ **Points forts d√©tect√©s** :" >> feedback.md
            
            # V√©rifier DOCTYPE
            if grep -q "<!DOCTYPE html>" "$file"; then
              echo "- ‚úÖ D√©claration DOCTYPE HTML5 pr√©sente" >> feedback.md
            fi
            
            # V√©rifier lang
            if grep -q '<html.*lang=' "$file"; then
              echo "- ‚úÖ Attribut lang d√©fini pour l'accessibilit√©" >> feedback.md
            fi
            
            # V√©rifier charset
            if grep -q 'charset=' "$file"; then
              echo "- ‚úÖ Encodage de caract√®res sp√©cifi√©" >> feedback.md
            fi
            
            # V√©rifier viewport
            if grep -q 'viewport' "$file"; then
              echo "- ‚úÖ Meta viewport pr√©sent (responsive design)" >> feedback.md
            fi
            
            # V√©rifier balises s√©mantiques
            semantic_tags=("header" "main" "footer" "nav" "section" "article" "aside")
            for tag in "${semantic_tags[@]}"; do
              if grep -q "<$tag" "$file"; then
                echo "- ‚úÖ Utilisation de balises s√©mantiques (\`<$tag>\`)" >> feedback.md
              fi
            done
            
            # V√©rifier structure de base
            if grep -q "<title>" "$file"; then
              echo "- ‚úÖ Titre de page d√©fini" >> feedback.md
            fi
            
            echo "" >> feedback.md
            
            # Points √† am√©liorer
            echo "#### ‚ö†Ô∏è **Points √† am√©liorer** :" >> feedback.md
            
            issues_found=false
            
            # V√©rifier images sans alt
            if grep -q '<img' "$file" && ! grep -q '<img[^>]*alt=' "$file"; then
              echo "- ‚ö†Ô∏è Images sans attribut alt d√©tect√©es" >> feedback.md
              issues_found=true
            fi
            
            # V√©rifier balises obsol√®tes
            obsolete_tags=("font" "center" "b" "i" "u")
            for tag in "${obsolete_tags[@]}"; do
              if grep -q "<$tag" "$file"; then
                echo "- ‚ö†Ô∏è Balise obsol√®te d√©tect√©e : \`<$tag>\` (utiliser CSS √† la place)" >> feedback.md
                issues_found=true
              fi
            done
            
            # V√©rifier styles inline
            if grep -q 'style=' "$file"; then
              echo "- ‚ö†Ô∏è Styles inline d√©tect√©s (consid√©rer l'externalisation CSS)" >> feedback.md
              issues_found=true
            fi
            
            # V√©rifier liens sans title ou texte descriptif
            if grep -q '<a.*href.*>' "$file"; then
              if ! grep -q '<a.*title=' "$file"; then
                echo "- ‚ÑπÔ∏è Consid√©rer l'ajout d'attributs title aux liens pour l'accessibilit√©" >> feedback.md
                issues_found=true
              fi
            fi
            
            if [ "$issues_found" = false ]; then
              echo "- ‚úÖ Aucun probl√®me majeur d√©tect√© dans ce fichier !" >> feedback.md
            fi
            
            echo "" >> feedback.md
          done

      - name: Check for alt attributes in images
        run: |
          echo "## V√©rification d√©taill√©e des images :" >> feedback.md
          echo "" >> feedback.md
          
          # Chercher les images dans les fichiers HTML
          html_files=$(find . -name "*.html" -not -path "./.git/*")
          images_found=false
          
          for file in $html_files; do
            if grep -q '<img' "$file" 2>/dev/null; then
              images_found=true
              echo "üñºÔ∏è **Images dans $file** :" >> feedback.md
              
              # Extraire toutes les balises img
              grep -o '<img[^>]*>' "$file" | while IFS= read -r img_tag; do
                if echo "$img_tag" | grep -q 'alt='; then
                  echo "  ‚úÖ Image avec attribut alt : \`$img_tag\`" >> feedback.md
                else
                  echo "  ‚ùå **Image sans attribut alt** : \`$img_tag\`" >> feedback.md
                  echo "    üí° **Suggestion** : Ajouter \`alt=\"Description de l'image\"\`" >> feedback.md
                fi
              done
              echo "" >> feedback.md
            fi
          done
          
          if [ "$images_found" = false ]; then
            echo "‚ÑπÔ∏è Aucune image trouv√©e dans les fichiers HTML." >> feedback.md
          fi
          echo "" >> feedback.md

      - name: Generate personalized recommendations  
        run: |
          echo "## üí° Recommandations personnalis√©es :" >> feedback.md
          echo "" >> feedback.md
          echo "### Actions prioritaires :" >> feedback.md
          
          html_files=$(find . -name "*.html" -not -path "./.git/*")
          priority_actions=false
          
          for file in $html_files; do
            if grep -q '<img' "$file" && ! grep -q 'alt=' "$file"; then
              echo "- ‚ôø **Urgent** : Ajouter des attributs \`alt\` aux images dans \`$file\`" >> feedback.md
              priority_actions=true
            fi
            
            if ! grep -q 'viewport' "$file"; then
              echo "- üì± **Recommand√©** : Ajouter la meta viewport dans \`$file\` pour le responsive" >> feedback.md
              priority_actions=true
            fi
          done
          
          if [ "$priority_actions" = false ]; then
            echo "‚úÖ Aucune action prioritaire n√©cessaire !" >> feedback.md
          fi
          echo "" >> feedback.md

      - name: Add pedagogical feedback with code examples
        run: |
          cat >> feedback.md << 'EOF'
          ## üìö Conseils p√©dagogiques avec exemples de code :
          
          ### üîß **Solutions aux erreurs courantes** :
          
          #### Balises non ferm√©es
          ```html
          <!-- ‚ùå Probl√®me -->
          <p>Texte sans fermeture
          
          <!-- ‚úÖ Solution -->
          <p>Texte avec fermeture correcte</p>
          ```
          
          #### Images sans attribut alt
          ```html
          <!-- ‚ùå Probl√®me -->
          <img src="image.jpg">
          
          <!-- ‚úÖ Solution -->
          <img src="image.jpg" alt="Description claire de l'image">
          ```
          
          #### Structure s√©mantique am√©lior√©e
          ```html
          <!-- ‚ùå Peu s√©mantique -->
          <div class="header">
            <div class="title">Mon Site</div>
          </div>
          
          <!-- ‚úÖ Structure s√©mantique -->
          <header>
            <h1>Mon Site</h1>
          </header>
          ```
          
          ### üí° **Bonnes pratiques recommand√©es** :
          
          - **Toujours** inclure un DOCTYPE HTML5
          - **Toujours** sp√©cifier l'attribut `lang` sur la balise `<html>`
          - **Toujours** ajouter des attributs `alt` descriptifs aux images
          - **Utiliser** des balises s√©mantiques (`<header>`, `<main>`, `<footer>`, etc.)
          - **√âviter** les balises obsol√®tes (`<font>`, `<center>`, etc.)
          - **S√©parer** le contenu (HTML) de la pr√©sentation (CSS)
          
          EOF

      - name: Commit feedback
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add feedback.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add automated feedback"
            git push
          fi
